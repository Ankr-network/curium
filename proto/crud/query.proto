syntax = "proto3";
package bluzelle.curium.crud;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/bluzelle/curium/x/crud/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2
	rpc Read(QueryReadRequest) returns (QueryReadResponse) {
		option (google.api.http).get = "/bluzelle/curium/crud/CrudValue/{uuid}/{key}";
	}
	rpc Keys(QueryKeysRequest) returns (QueryKeysResponse) {
		option (google.api.http).get = "/bluzelle/curium/crud/CrudValue";
	}
	rpc MyKeys(QueryMyKeysRequest) returns (QueryMyKeysResponse) {
		option (google.api.http).get = "/bluzelle/curium/crud/CrudValue/{address}/{uuid}";
	}
	rpc Count(QueryCountRequest) returns (QueryCountResponse) {
		option (google.api.http).get = "/bluzelle/curium/crud/CrudValue/{uuid}";
	}
}

// this line is used by starport scaffolding # 3
message QueryReadRequest {
	string uuid = 1;
	string key = 2;
}

message QueryReadResponse {
	bytes value = 1;
}

message QueryKeysRequest {
	string uuid = 1;
	cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryKeysResponse {
	repeated string key = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMyKeysRequest {
	string address = 1;
	string uuid = 2;
	cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryMyKeysResponse {
	repeated string key = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCountRequest {
	string address = 1;
	string uuid = 2;
}

message QueryCountResponse {
	string uuid = 1;
	int64 count = 2;
}


