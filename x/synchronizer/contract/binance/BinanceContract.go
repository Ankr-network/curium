// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package binance

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BluzelleAdapterKeyValue is an auto generated low-level Go binding around an user-defined struct.
type BluzelleAdapterKeyValue struct {
	Value    string
	IsActive bool
	Expiry   *big.Int
}

// BluzelleAdapterTransaction is an auto generated low-level Go binding around an user-defined struct.
type BluzelleAdapterTransaction struct {
	Opt      string
	Uuid     string
	Key      string
	Value    string
	Bookmark *big.Int
}

// AddressABI is the input ABI used to generate the binding from.
const AddressABI = "[]"

// AddressBin is the compiled bytecode used for deploying new contracts.
var AddressBin = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208aa813afe5bbc687f208fbc0cedb7ce60394f522015857a7210269c1f1bbc92664736f6c63430008030033"

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(AddressABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// BluzelleAdapterABI is the input ABI used to generate the binding from.
const BluzelleAdapterABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chargePerByte\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"getEstimateCRUDCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"getSynchronizerData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"opt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"bookmark\",\"type\":\"uint256\"}],\"internalType\":\"structBluzelleAdapter.Transaction[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uuid\",\"type\":\"string\"}],\"name\":\"keysValues\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structBluzelleAdapter.KeyValue[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lease\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"read\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structBluzelleAdapter.KeyValue\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uuid\",\"type\":\"string\"}],\"name\":\"removeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chargePerByte\",\"type\":\"uint256\"}],\"name\":\"setChargeperByte\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setLease\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uuid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_value\",\"type\":\"string\"}],\"name\":\"update\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"structBluzelleAdapter.KeyValue\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uuidMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"valueMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BluzelleAdapterFuncSigs maps the 4-byte function signature to its string representation.
var BluzelleAdapterFuncSigs = map[string]string{
	"059f8b16": "MULTIPLIER()",
	"6c837f7d": "chargePerByte()",
	"5d28560a": "create(string,string,string)",
	"a46496bd": "createCount()",
	"9e6132ff": "deleteCount()",
	"7483ac3e": "getEstimateCRUDCost(string,string)",
	"52d866dc": "getSynchronizerData(uint256,uint256)",
	"fd220167": "keyMax()",
	"913f5bb2": "keysValues(address,string)",
	"c998eef4": "lease()",
	"8da5cb5b": "owner()",
	"d967f728": "read(address,string,string)",
	"44590a7e": "remove(string,string)",
	"0a9af861": "removeAll(string)",
	"715018a6": "renounceOwnership()",
	"90001833": "setChargeperByte(uint256)",
	"6136ec4c": "setLease(uint256)",
	"fc0c546a": "token()",
	"55a373d6": "tokenContract()",
	"b77bf600": "transactionCount()",
	"f2fde38b": "transferOwnership(address)",
	"31c3e456": "update(string,string,string)",
	"69b4ecc9": "updateCount()",
	"a74b6a40": "uuidMax()",
	"306d5d4f": "valueMax()",
	"3ccfd60b": "withdraw()",
}

// BluzelleAdapterBin is the compiled bytecode used for deploying new contracts.
var BluzelleAdapterBin = "0x608060405234801561001057600080fd5b50600080546001600160a01b0319338181169282169290921790911782556006829055600782905560088290556009919091556301e13380600a556010805490911673a27f67eec3fe27168f81924974fb6356936eda7f17905562023a52600f55610800600b55611001600c5562040000600d5564e8d4a51000600e556137c28061009c6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80637483ac3e116100de578063a74b6a4011610097578063d967f72811610071578063d967f72814610329578063f2fde38b1461033c578063fc0c546a1461034f578063fd220167146103625761018e565b8063a74b6a401461030e578063b77bf60014610317578063c998eef4146103205761018e565b80637483ac3e146102a35780638da5cb5b146102b657806390001833146102c9578063913f5bb2146102dc5780639e6132ff146102fc578063a46496bd146103055761018e565b806352d866dc1161014b5780636136ec4c116101255780636136ec4c1461027457806369b4ecc9146102875780636c837f7d14610290578063715018a6146102995761018e565b806352d866dc1461021657806355a373d6146102365780635d28560a146102615761018e565b8063059f8b16146101935780630a9af861146101af578063306d5d4f146101d257806331c3e456146101db5780633ccfd60b146101fb57806344590a7e14610203575b600080fd5b61019c600e5481565b6040519081526020015b60405180910390f35b6101c26101bd36600461322b565b61036b565b60405190151581526020016101a6565b61019c600d5481565b6101ee6101e93660046132b5565b6105a8565b6040516101a69190613659565b6101c2610d8e565b6101c261021136600461325e565b610ec3565b610229610224366004613331565b611759565b6040516101a691906134fc565b601054610249906001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b6101c261026f3660046132b5565b611ac1565b6101c2610282366004613301565b61254f565b61019c60085481565b61019c600f5481565b6102a1612570565b005b61019c6102b136600461325e565b6125d1565b600054610249906001600160a01b031681565b6101c26102d7366004613301565b61260c565b6102ef6102ea36600461314e565b61262d565b6040516101a6919061349b565b61019c60095481565b61019c60075481565b61019c600b5481565b61019c60065481565b61019c600a5481565b6101ee61033736600461319a565b61298d565b6102a161034a366004613134565b612ac2565b601154610249906001600160a01b031681565b61019c600c5481565b60408051600080825260208201808452825190209092909161038f918591016133b5565b6040516020818303038152906040528051906020012014156103cc5760405162461bcd60e51b81526004016103c3906135f9565b60405180910390fd5b6003826040516103dc91906133b5565b9081526040519081900360200190205460ff1615156001146104105760405162461bcd60e51b81526004016103c390613630565b61041933612b30565b600060018360405161042b91906133b5565b908152604080519182900360209081018320805480830285018301909352828452919060009084015b8282101561052257838290600052602060002090600202016040518060400160405290816000820180546104879061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546104b39061370a565b80156105005780601f106104d557610100808354040283529160200191610500565b820191906000526020600020905b8154815290600101906020018083116104e357829003601f168201915b5050505050815260200160018201548152505081526020019060010190610454565b50505050905060005b60018460405161053b91906133b5565b90815260200160405180910390206001015481101561059c576105898483838151811061057857634e487b7160e01b600052603260045260246000fd5b602002602001015160000151610ec3565b508061059481613745565b91505061052b565b5060019150505b919050565b6105ce604051806060016040528060608152602001600015158152602001600081525090565b600d54825111156106215760405162461bcd60e51b815260206004820152601f60248201527f56616c75652065786365656473206d61782073697a6520696e2062797465730060448201526064016103c3565b6040805160008152602081018083528151902091610641918791016133b5565b6040516020818303038152906040528051906020012014156106755760405162461bcd60e51b81526004016103c3906135f9565b6040805160008152602081018083528151902091610695918691016133b5565b6040516020818303038152906040528051906020012014156106c95760405162461bcd60e51b81526004016103c3906135c2565b60408051600081526020810180835281519020916106e9918591016133b5565b60405160208183030381529060405280519060200120141561074d5760405162461bcd60e51b815260206004820152601e60248201527f56616c75652063616e6e6f74206265206120626c616e6b20737472696e67000060448201526064016103c3565b60038460405161075d91906133b5565b9081526040519081900360200190205460ff1615156001146107915760405162461bcd60e51b81526004016103c390613630565b826040516020016107a291906133b5565b60408051601f198184030181528282528051602091820120336000908152600290925291902090916107d59087906133b5565b9081526020016040518091039020600101846040516107f491906133b5565b90815260200160405180910390206040516020016108129190613400565b604051602081830303815290604052805190602001201461086d5760405162461bcd60e51b815260206004820152601560248201527412d95e481b9bdd08199bdd5b99081a5b8815555251605a1b60448201526064016103c3565b61087633612b30565b600061088e8351600f54612e9d90919063ffffffff16565b90506108a5600e5482612e9d90919063ffffffff16565b601054601180546001600160a01b0319166001600160a01b0390921691821790556040516323b872dd60e01b815233600482015230602482015260448101839052919250906323b872dd90606401602060405180830381600087803b15801561090d57600080fd5b505af1158015610921573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610945919061320b565b5060408051606081018252848152600160208083019190915233600090815260029091528290208251919283019161097e9089906133b5565b908152604051908190036020018120906109999088906133b5565b90815260200160405180910390206002015481525060026000336001600160a01b03166001600160a01b03168152602001908152602001600020600001866040516109e491906133b5565b908152604051908190036020018120906109ff9087906133b5565b90815260200160405180910390206000820151816000019080519060200190610a29929190612f82565b5060208281015160018301805460ff19169115159190911790556040928301516002909201919091558151808301835260068082526575706461746560d01b828401908152905460009081526004909352929091209051610a8a9290612f82565b5060065460009081526004602090815260409091208651610ab392600190920191880190612f82565b5060065460009081526004602090815260409091208551610adc92600290920191870190612f82565b5060065460009081526004602090815260409091208451610b0592600390920191860190612f82565b506006546000818152600460208181526040928390209091019290925551600591610b349188918891016133d1565b60408051601f1981840301815290829052610b4e916133b5565b908152604080516020928190038301902060065460009081526004845291822081546001810183559183529290912082546005909202019081908390610b939061370a565b610b9e929190613006565b506001820181600101908054610bb39061370a565b610bbe929190613006565b506002820181600201908054610bd39061370a565b610bde929190613006565b506003820181600301908054610bf39061370a565b610bfe929190613006565b50600491820154910155604051600590610c1e90879087906020016133d1565b60408051601f1981840301815290829052610c38916133b5565b9081526040519081900360200190206001018054906000610c5883613745565b909155505060088054906000610c6d83613745565b909155505060068054906000610c8283613745565b909155505033600090815260026020526040908190209051610ca59087906133b5565b90815260405190819003602001812090610cc09086906133b5565b9081526020016040518091039020604051806060016040529081600082018054610ce99061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d159061370a565b8015610d625780601f10610d3757610100808354040283529160200191610d62565b820191906000526020600020905b815481529060010190602001808311610d4557829003601f168201915b5050509183525050600182015460ff161515602082015260029091015460409091015295945050505050565b600080546001600160a01b03163314610da657600080fd5b601054601180546001600160a01b0319166001600160a01b0390921691821790556040516370a0823160e01b815230600482015263a9059cbb90339083906370a082319060240160206040518083038186803b158015610e0557600080fd5b505afa158015610e19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3d9190613319565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610e8357600080fd5b505af1158015610e97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebb919061320b565b506001905090565b604080516000808252602082018084528251902090929091610ee7918691016133b5565b604051602081830303815290604052805190602001201415610f1b5760405162461bcd60e51b81526004016103c3906135f9565b6040805160008152602081018083528151902091610f3b918591016133b5565b604051602081830303815290604052805190602001201415610f6f5760405162461bcd60e51b81526004016103c3906135c2565b600383604051610f7f91906133b5565b9081526040519081900360200190205460ff161515600114610fb35760405162461bcd60e51b81526004016103c390613630565b81604051602001610fc491906133b5565b60408051601f19818403018152828252805160209182012033600090815260029092529190209091610ff79086906133b5565b90815260200160405180910390206001018360405161101691906133b5565b90815260200160405180910390206040516020016110349190613400565b604051602081830303815290604052805190602001201461108f5760405162461bcd60e51b815260206004820152601560248201527412d95e481b9bdd08199bdd5b99081a5b8815555251605a1b60448201526064016103c3565b61109833612b30565b60006001846040516110aa91906133b5565b908152604080519182900360209081018320805480830285018301909352828452919060009084015b828210156111a157838290600052602060002090600202016040518060400160405290816000820180546111069061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546111329061370a565b801561117f5780601f106111545761010080835404028352916020019161117f565b820191906000526020600020905b81548152906001019060200180831161116257829003601f168201915b50505050508152602001600182015481525050815260200190600101906110d3565b50505050905060005b6001856040516111ba91906133b5565b90815260200160405180910390206001015481101561174c57836040516020016111e491906133b5565b6040516020818303038152906040528051906020012082828151811061121a57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015160405160200161123691906133b5565b60405160208183030381529060405280519060200120141561173a57604080516020808201835260008083523381526002909152829020915190919061127d9088906133b5565b90815260200160405180910390206001018383815181106112ae57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040516112c791906133b5565b908152602001604051809103902090805190602001906112e8929190612f82565b5060408051608081018252600060608201818152825260208083018290528284018290523382526002905282902091519091906113269088906133b5565b908152602001604051809103902060000183838151811061135757634e487b7160e01b600052603260045260246000fd5b60200260200101516000015160405161137091906133b5565b9081526020016040518091039020600082015181600001908051906020019061139a929190612f82565b5060208281015160018301805460ff191691151591909117905560409283015160029283015533600090815291905281902090516113d99087906133b5565b90815260405190819003602001902060020180549060006113f9836136f3565b909155505060408051808201825260068082526564656c65746560d01b602080840191825291546000908152600490925292902090516114399290612f82565b506006546000908152600460209081526040909120865161146292600190920191880190612f82565b5081818151811061148357634e487b7160e01b600052603260045260246000fd5b60200260200101516000015160046000600654815260200190815260200160002060020190805190602001906114ba929190612f82565b5060408051602080820180845260008084526006548152600490925292902090516114eb9260039092019190612f82565b50600654600081815260046020819052604090912001558151600590869084908490811061152957634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516040516020016115469291906133d1565b60408051601f1981840301815290829052611560916133b5565b9081526040805160209281900383019020600654600090815260048452918220815460018101835591835292909120825460059092020190819083906115a59061370a565b6115b0929190613006565b5060018201816001019080546115c59061370a565b6115d0929190613006565b5060028201816002019080546115e59061370a565b6115f0929190613006565b5060038201816003019080546116059061370a565b611610929190613006565b5060048201548160040155505060058583838151811061164057634e487b7160e01b600052603260045260246000fd5b60200260200101516000015160405160200161165d9291906133d1565b60408051601f1981840301815290829052611677916133b5565b908152604051908190036020019020600101805490600061169783613745565b9190505550604051806020016040528060008152508282815181106116cc57634e487b7160e01b600052603260045260246000fd5b60200260200101516000018190525060008282815181106116fd57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015101526009805490600061171b83613745565b90915550506006805490600061173083613745565b919050555061174c565b8061174481613745565b9150506111aa565b5060019150505b92915050565b6060600060065467ffffffffffffffff81111561178657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156117e957816020015b6117d66040518060a0016040528060608152602001606081526020016060815260200160608152602001600081525090565b8152602001906001900390816117a45790505b509050828015806117fb575060065481115b1561180557506006545b845b81811015611ab75760008181526004602052604090819020815160a081019092528054829082906118379061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546118639061370a565b80156118b05780601f10611885576101008083540402835291602001916118b0565b820191906000526020600020905b81548152906001019060200180831161189357829003601f168201915b505050505081526020016001820180546118c99061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546118f59061370a565b80156119425780601f1061191757610100808354040283529160200191611942565b820191906000526020600020905b81548152906001019060200180831161192557829003601f168201915b5050505050815260200160028201805461195b9061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546119879061370a565b80156119d45780601f106119a9576101008083540402835291602001916119d4565b820191906000526020600020905b8154815290600101906020018083116119b757829003601f168201915b505050505081526020016003820180546119ed9061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054611a199061370a565b8015611a665780601f10611a3b57610100808354040283529160200191611a66565b820191906000526020600020905b815481529060010190602001808311611a4957829003601f168201915b50505050508152602001600482015481525050838281518110611a9957634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611aaf90613745565b915050611807565b5090949350505050565b6000600b5484511115611b165760405162461bcd60e51b815260206004820152601e60248201527f555549442065786365656473206d61782073697a6520696e206279746573000060448201526064016103c3565b600c5483511115611b695760405162461bcd60e51b815260206004820152601d60248201527f4b65792065786365656473206d61782073697a6520696e20627974657300000060448201526064016103c3565b600d5482511115611bbc5760405162461bcd60e51b815260206004820152601f60248201527f56616c75652065786365656473206d61782073697a6520696e2062797465730060448201526064016103c3565b6040805160008152602081018083528151902091611bdc918791016133b5565b604051602081830303815290604052805190602001201415611c105760405162461bcd60e51b81526004016103c3906135f9565b6040805160008152602081018083528151902091611c30918691016133b5565b604051602081830303815290604052805190602001201415611c645760405162461bcd60e51b81526004016103c3906135c2565b6040805160008152602081018083528151902091611c84918591016133b5565b604051602081830303815290604052805190602001201415611ce85760405162461bcd60e51b815260206004820152601e60248201527f56616c75652063616e6e6f74206265206120626c616e6b20737472696e67000060448201526064016103c3565b600384604051611cf891906133b5565b9081526040519081900360200190205460ff16151560011415611d525760405162461bcd60e51b81526020600482015260126024820152712aaaa4a21030b63932b0b23c903a30b5b2b760711b60448201526064016103c3565b82604051602001611d6391906133b5565b60408051601f19818403018152828252805160209182012033600090815260029092529190209091611d969087906133b5565b908152602001604051809103902060010184604051611db591906133b5565b9081526020016040518091039020604051602001611dd39190613400565b604051602081830303815290604052805190602001201415611e375760405162461bcd60e51b815260206004820152601e60248201527f4b65792065786973747320696e20746865205555494420616c7265616479000060448201526064016103c3565b611e4033612b30565b6000611e6f611e5b8451600f54612e9d90919063ffffffff16565b8551600f54611e6991612e9d565b90612f23565b9050611e86600e5482612e9d90919063ffffffff16565b601054601180546001600160a01b0319166001600160a01b0390921691821790556040516323b872dd60e01b815233600482015230602482015260448101839052919250906323b872dd90606401602060405180830381600087803b158015611eee57600080fd5b505af1158015611f02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f26919061320b565b506001600386604051611f3991906133b5565b9081526040805160209281900383019020805460ff191693151593909317909255336000908152600282529182206001908101805491820181558352918190208751611f8c939190910191880190612f82565b50336000908152600260208190526040822001805491611fab83613745565b90915550503360009081526002602052604090206003015460ff1661201e57336000908152600260205260408082209051611fe79088906133b5565b90815260408051918290036020908101909220600290810193909355336000908152929091529020600301805460ff191660011790555b3360009081526002602052604090819020905161203c9087906133b5565b9081526040519081900360200190206003015460ff1661209c5733600090815260026020526040908190209051600191906120789088906133b5565b908152604051908190036020019020600301805491151560ff199092169190911790555b60006120b3600a5442612f2390919063ffffffff16565b3360009081526002602052604090819020905191925086916120d69089906133b5565b9081526020016040518091039020600101866040516120f591906133b5565b90815260200160405180910390209080519060200190612116929190612f82565b50336000908152600260205260409081902090518591906121389089906133b5565b908152604051908190036020018120906121539088906133b5565b90815260200160405180910390206000019080519060200190612177929190612f82565b50336000908152600260205260409081902090516001919061219a9089906133b5565b908152604051908190036020018120906121b59088906133b5565b9081526040805160209281900383018120600101805460ff1916941515949094179093553360009081526002909252902082916121f39089906133b5565b9081526040519081900360200181209061220e9088906133b5565b908152604080519182900360209081018320600290810194909455336000908152939052909120906122419088906133b5565b908152604051908190036020019020600201805490600061226183613745565b90915550506040805180820182528681526020810183905290516001906122899089906133b5565b9081526040516020918190038201902080546001810182556000918252908290208351805185946002909402909201926122c892849290910190612f82565b506020820151816001015550506001876040516122e591906133b5565b908152604051908190036020019020600101805490600061230583613745565b909155505060408051808201825260068082526563726561746560d01b602080840191825291546000908152600490925292902090516123459290612f82565b506006546000908152600460209081526040909120885161236e926001909201918a0190612f82565b506006546000908152600460209081526040909120875161239792600290920191890190612f82565b50600654600090815260046020908152604090912086516123c092600390920191880190612f82565b5060065460008181526004602081815260409283902090910192909255516005916123ef918a918a91016133d1565b60408051601f1981840301815290829052612409916133b5565b90815260408051602092819003830190206006546000908152600484529182208154600181018355918352929091208254600590920201908190839061244e9061370a565b612459929190613006565b50600182018160010190805461246e9061370a565b612479929190613006565b50600282018160020190805461248e9061370a565b612499929190613006565b5060038201816003019080546124ae9061370a565b6124b9929190613006565b506004918201549101556040516005906124d990899089906020016133d1565b60408051601f19818403018152908290526124f3916133b5565b908152604051908190036020019020600101805490600061251383613745565b90915550506007805490600061252883613745565b90915550506006805490600061253d83613745565b90915550600198975050505050505050565b600080546001600160a01b0316331461256757600080fd5b50600a55600190565b6000546001600160a01b0316331461258757600080fd5b60008054604080516001600160a01b03909216825260208201929092527f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9910160405180910390a1565b6000806125ed611e5b8451600f54612e9d90919063ffffffff16565b9050612604600e5482612e9d90919063ffffffff16565b949350505050565b600080546001600160a01b0316331461262457600080fd5b50600f55600190565b6060600060018360405161264191906133b5565b90815260200160405180910390206001015467ffffffffffffffff81111561267957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156126d057816020015b6126bd604051806060016040528060608152602001600015158152602001600081525090565b8152602001906001900390816126975790505b50905060005b6001846040516126e691906133b5565b9081526020016040518091039020600101548110156129855760408051600081526020810191829052518120906001906127219087906133b5565b9081526020016040518091039020600001828154811061275157634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000016040516020016127729190613400565b60405160208183030381529060405280519060200120141580156127e857506001846040516127a191906133b5565b908152602001604051809103902060000181815481106127d157634e487b7160e01b600052603260045260246000fd5b906000526020600020906002020160010154600014155b15612973576001600160a01b0385166000908152600260205260409081902090516128149086906133b5565b908152604051908190036020018120906001906128329087906133b5565b9081526020016040518091039020600001828154811061286257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000016040516128809190613400565b90815260200160405180910390206040518060600160405290816000820180546128a99061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546128d59061370a565b80156129225780601f106128f757610100808354040283529160200191612922565b820191906000526020600020905b81548152906001019060200180831161290557829003601f168201915b5050509183525050600182015460ff1615156020820152600290910154604090910152825183908390811061296757634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b8061297d81613745565b9150506126d6565b509392505050565b6129b3604051806060016040528060608152602001600015158152602001600081525090565b6001600160a01b0384166000908152600260205260409081902090516129da9085906133b5565b908152604051908190036020018120906129f59084906133b5565b9081526020016040518091039020604051806060016040529081600082018054612a1e9061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054612a4a9061370a565b8015612a975780601f10612a6c57610100808354040283529160200191612a97565b820191906000526020600020905b815481529060010190602001808311612a7a57829003601f168201915b5050509183525050600182015460ff1615156020820152600290910154604090910152949350505050565b6000546001600160a01b03163314612ad957600080fd5b6001600160a01b038116612aec57600080fd5b604080513381526001600160a01b03831660208201527f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9910160405180910390a150565b60005b6001600160a01b03821660009081526002602081905260409091200154811015612e995760005b6001600160a01b03831660009081526002602052604090206001908101805484908110612b9757634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051612bae9190613400565b908152602001604051809103902060010154811015612e865742600160026000866001600160a01b03166001600160a01b031681526020019081526020016000206001018481548110612c1157634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051612c289190613400565b90815260200160405180910390206000018281548110612c5857634e487b7160e01b600052603260045260246000fd5b9060005260206000209060020201600101541015612e74576001600160a01b03831660009081526002602052604090206001018054612e72919084908110612cb057634e487b7160e01b600052603260045260246000fd5b906000526020600020018054612cc59061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054612cf19061370a565b8015612d3e5780601f10612d1357610100808354040283529160200191612d3e565b820191906000526020600020905b815481529060010190602001808311612d2157829003601f168201915b5050505050600160026000876001600160a01b03166001600160a01b031681526020019081526020016000206001018581548110612d8c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001604051612da39190613400565b90815260200160405180910390206000018381548110612dd357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600202016000018054612def9061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054612e1b9061370a565b8015612e685780601f10612e3d57610100808354040283529160200191612e68565b820191906000526020600020905b815481529060010190602001808311612e4b57829003601f168201915b5050505050610ec3565b505b80612e7e81613745565b915050612b5a565b5080612e9181613745565b915050612b33565b5050565b600082612eac57506000611753565b6000612eb883856136a4565b905082612ec58583613684565b14612f1c5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016103c3565b9392505050565b600080612f30838561366c565b905083811015612f1c5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016103c3565b828054612f8e9061370a565b90600052602060002090601f016020900481019282612fb05760008555612ff6565b82601f10612fc957805160ff1916838001178555612ff6565b82800160010185558215612ff6579182015b82811115612ff6578251825591602001919060010190612fdb565b50613002929150613081565b5090565b8280546130129061370a565b90600052602060002090601f0160209004810192826130345760008555612ff6565b82601f106130455780548555612ff6565b82800160010185558215612ff657600052602060002091601f016020900482015b82811115612ff6578254825591600101919060010190613066565b5b808211156130025760008155600101613082565b80356001600160a01b03811681146105a357600080fd5b600082601f8301126130bd578081fd5b813567ffffffffffffffff808211156130d8576130d8613776565b604051601f8301601f19908116603f0116810190828211818310171561310057613100613776565b81604052838152866020858801011115613118578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215613145578081fd5b612f1c82613096565b60008060408385031215613160578081fd5b61316983613096565b9150602083013567ffffffffffffffff811115613184578182fd5b613190858286016130ad565b9150509250929050565b6000806000606084860312156131ae578081fd5b6131b784613096565b9250602084013567ffffffffffffffff808211156131d3578283fd5b6131df878388016130ad565b935060408601359150808211156131f4578283fd5b50613201868287016130ad565b9150509250925092565b60006020828403121561321c578081fd5b81518015158114612f1c578182fd5b60006020828403121561323c578081fd5b813567ffffffffffffffff811115613252578182fd5b612604848285016130ad565b60008060408385031215613270578182fd5b823567ffffffffffffffff80821115613287578384fd5b613293868387016130ad565b935060208501359150808211156132a8578283fd5b50613190858286016130ad565b6000806000606084860312156132c9578283fd5b833567ffffffffffffffff808211156132e0578485fd5b6132ec878388016130ad565b945060208601359150808211156131d3578384fd5b600060208284031215613312578081fd5b5035919050565b60006020828403121561332a578081fd5b5051919050565b60008060408385031215613343578182fd5b50508035926020909101359150565b6000815180845261336a8160208601602086016136c3565b601f01601f19169290920160200192915050565b60008151606084526133936060850182613352565b9050602083015115156020850152604083015160408501528091505092915050565b600082516133c78184602087016136c3565b9190910192915050565b600083516133e38184602088016136c3565b8351908301906133f78183602088016136c3565b01949350505050565b600080835482600182811c91508083168061341c57607f831692505b602080841082141561343c57634e487b7160e01b87526022600452602487fd5b81801561345057600181146134615761348d565b60ff1986168952848901965061348d565b60008a815260209020885b868110156134855781548b82015290850190830161346c565b505084890196505b509498975050505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b828110156134ef57603f198886030184526134dd85835161337e565b945092850192908501906001016134c1565b5092979650505050505050565b60006020808301818452808551808352604092508286019150828160051b870101848801865b838110156135b457603f19898403018552815160a0815181865261354882870182613352565b915050888201518582038a8701526135608282613352565b91505087820151858203898701526135788282613352565b915050606080830151868303828801526135928382613352565b6080948501519790940196909652505094870194925090860190600101613522565b509098975050505050505050565b6020808252601c908201527f4b65792063616e6e6f74206265206120626c616e6b20737472696e6700000000604082015260600190565b6020808252601d908201527f555549442063616e6e6f74206265206120626c616e6b20737472696e67000000604082015260600190565b6020808252600f908201526e139bc81ad95e5cc81a5b8815555251608a1b604082015260600190565b600060208252612f1c602083018461337e565b6000821982111561367f5761367f613760565b500190565b60008261369f57634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156136be576136be613760565b500290565b60005b838110156136de5781810151838201526020016136c6565b838111156136ed576000848401525b50505050565b60008161370257613702613760565b506000190190565b600181811c9082168061371e57607f821691505b6020821081141561373f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561375957613759613760565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212201e64646bd9da775c07265a5ca703ec0d7c297852ebc54eff6b8cfc9290a96aad64736f6c63430008030033"

// DeployBluzelleAdapter deploys a new Ethereum contract, binding an instance of BluzelleAdapter to it.
func DeployBluzelleAdapter(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BluzelleAdapter, error) {
	parsed, err := abi.JSON(strings.NewReader(BluzelleAdapterABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BluzelleAdapterBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BluzelleAdapter{BluzelleAdapterCaller: BluzelleAdapterCaller{contract: contract}, BluzelleAdapterTransactor: BluzelleAdapterTransactor{contract: contract}, BluzelleAdapterFilterer: BluzelleAdapterFilterer{contract: contract}}, nil
}

// BluzelleAdapter is an auto generated Go binding around an Ethereum contract.
type BluzelleAdapter struct {
	BluzelleAdapterCaller     // Read-only binding to the contract
	BluzelleAdapterTransactor // Write-only binding to the contract
	BluzelleAdapterFilterer   // Log filterer for contract events
}

// BluzelleAdapterCaller is an auto generated read-only Go binding around an Ethereum contract.
type BluzelleAdapterCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BluzelleAdapterTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BluzelleAdapterTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BluzelleAdapterFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BluzelleAdapterFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BluzelleAdapterSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BluzelleAdapterSession struct {
	Contract     *BluzelleAdapter  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BluzelleAdapterCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BluzelleAdapterCallerSession struct {
	Contract *BluzelleAdapterCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// BluzelleAdapterTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BluzelleAdapterTransactorSession struct {
	Contract     *BluzelleAdapterTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// BluzelleAdapterRaw is an auto generated low-level Go binding around an Ethereum contract.
type BluzelleAdapterRaw struct {
	Contract *BluzelleAdapter // Generic contract binding to access the raw methods on
}

// BluzelleAdapterCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BluzelleAdapterCallerRaw struct {
	Contract *BluzelleAdapterCaller // Generic read-only contract binding to access the raw methods on
}

// BluzelleAdapterTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BluzelleAdapterTransactorRaw struct {
	Contract *BluzelleAdapterTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBluzelleAdapter creates a new instance of BluzelleAdapter, bound to a specific deployed contract.
func NewBluzelleAdapter(address common.Address, backend bind.ContractBackend) (*BluzelleAdapter, error) {
	contract, err := bindBluzelleAdapter(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BluzelleAdapter{BluzelleAdapterCaller: BluzelleAdapterCaller{contract: contract}, BluzelleAdapterTransactor: BluzelleAdapterTransactor{contract: contract}, BluzelleAdapterFilterer: BluzelleAdapterFilterer{contract: contract}}, nil
}

// NewBluzelleAdapterCaller creates a new read-only instance of BluzelleAdapter, bound to a specific deployed contract.
func NewBluzelleAdapterCaller(address common.Address, caller bind.ContractCaller) (*BluzelleAdapterCaller, error) {
	contract, err := bindBluzelleAdapter(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BluzelleAdapterCaller{contract: contract}, nil
}

// NewBluzelleAdapterTransactor creates a new write-only instance of BluzelleAdapter, bound to a specific deployed contract.
func NewBluzelleAdapterTransactor(address common.Address, transactor bind.ContractTransactor) (*BluzelleAdapterTransactor, error) {
	contract, err := bindBluzelleAdapter(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BluzelleAdapterTransactor{contract: contract}, nil
}

// NewBluzelleAdapterFilterer creates a new log filterer instance of BluzelleAdapter, bound to a specific deployed contract.
func NewBluzelleAdapterFilterer(address common.Address, filterer bind.ContractFilterer) (*BluzelleAdapterFilterer, error) {
	contract, err := bindBluzelleAdapter(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BluzelleAdapterFilterer{contract: contract}, nil
}

// bindBluzelleAdapter binds a generic wrapper to an already deployed contract.
func bindBluzelleAdapter(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BluzelleAdapterABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BluzelleAdapter *BluzelleAdapterRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BluzelleAdapter.Contract.BluzelleAdapterCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BluzelleAdapter *BluzelleAdapterRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.BluzelleAdapterTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BluzelleAdapter *BluzelleAdapterRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.BluzelleAdapterTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BluzelleAdapter *BluzelleAdapterCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BluzelleAdapter.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BluzelleAdapter *BluzelleAdapterTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BluzelleAdapter *BluzelleAdapterTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.contract.Transact(opts, method, params...)
}

// MULTIPLIER is a free data retrieval call binding the contract method 0x059f8b16.
//
// Solidity: function MULTIPLIER() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) MULTIPLIER(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "MULTIPLIER")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MULTIPLIER is a free data retrieval call binding the contract method 0x059f8b16.
//
// Solidity: function MULTIPLIER() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) MULTIPLIER() (*big.Int, error) {
	return _BluzelleAdapter.Contract.MULTIPLIER(&_BluzelleAdapter.CallOpts)
}

// MULTIPLIER is a free data retrieval call binding the contract method 0x059f8b16.
//
// Solidity: function MULTIPLIER() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) MULTIPLIER() (*big.Int, error) {
	return _BluzelleAdapter.Contract.MULTIPLIER(&_BluzelleAdapter.CallOpts)
}

// ChargePerByte is a free data retrieval call binding the contract method 0x6c837f7d.
//
// Solidity: function chargePerByte() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) ChargePerByte(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "chargePerByte")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ChargePerByte is a free data retrieval call binding the contract method 0x6c837f7d.
//
// Solidity: function chargePerByte() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) ChargePerByte() (*big.Int, error) {
	return _BluzelleAdapter.Contract.ChargePerByte(&_BluzelleAdapter.CallOpts)
}

// ChargePerByte is a free data retrieval call binding the contract method 0x6c837f7d.
//
// Solidity: function chargePerByte() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) ChargePerByte() (*big.Int, error) {
	return _BluzelleAdapter.Contract.ChargePerByte(&_BluzelleAdapter.CallOpts)
}

// CreateCount is a free data retrieval call binding the contract method 0xa46496bd.
//
// Solidity: function createCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) CreateCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "createCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CreateCount is a free data retrieval call binding the contract method 0xa46496bd.
//
// Solidity: function createCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) CreateCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.CreateCount(&_BluzelleAdapter.CallOpts)
}

// CreateCount is a free data retrieval call binding the contract method 0xa46496bd.
//
// Solidity: function createCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) CreateCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.CreateCount(&_BluzelleAdapter.CallOpts)
}

// DeleteCount is a free data retrieval call binding the contract method 0x9e6132ff.
//
// Solidity: function deleteCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) DeleteCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "deleteCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DeleteCount is a free data retrieval call binding the contract method 0x9e6132ff.
//
// Solidity: function deleteCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) DeleteCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.DeleteCount(&_BluzelleAdapter.CallOpts)
}

// DeleteCount is a free data retrieval call binding the contract method 0x9e6132ff.
//
// Solidity: function deleteCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) DeleteCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.DeleteCount(&_BluzelleAdapter.CallOpts)
}

// GetEstimateCRUDCost is a free data retrieval call binding the contract method 0x7483ac3e.
//
// Solidity: function getEstimateCRUDCost(string _key, string _value) view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) GetEstimateCRUDCost(opts *bind.CallOpts, _key string, _value string) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "getEstimateCRUDCost", _key, _value)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEstimateCRUDCost is a free data retrieval call binding the contract method 0x7483ac3e.
//
// Solidity: function getEstimateCRUDCost(string _key, string _value) view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) GetEstimateCRUDCost(_key string, _value string) (*big.Int, error) {
	return _BluzelleAdapter.Contract.GetEstimateCRUDCost(&_BluzelleAdapter.CallOpts, _key, _value)
}

// GetEstimateCRUDCost is a free data retrieval call binding the contract method 0x7483ac3e.
//
// Solidity: function getEstimateCRUDCost(string _key, string _value) view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) GetEstimateCRUDCost(_key string, _value string) (*big.Int, error) {
	return _BluzelleAdapter.Contract.GetEstimateCRUDCost(&_BluzelleAdapter.CallOpts, _key, _value)
}

// GetSynchronizerData is a free data retrieval call binding the contract method 0x52d866dc.
//
// Solidity: function getSynchronizerData(uint256 _start, uint256 _limit) view returns((string,string,string,string,uint256)[])
func (_BluzelleAdapter *BluzelleAdapterCaller) GetSynchronizerData(opts *bind.CallOpts, _start *big.Int, _limit *big.Int) ([]BluzelleAdapterTransaction, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "getSynchronizerData", _start, _limit)

	if err != nil {
		return *new([]BluzelleAdapterTransaction), err
	}

	out0 := *abi.ConvertType(out[0], new([]BluzelleAdapterTransaction)).(*[]BluzelleAdapterTransaction)

	return out0, err

}

// GetSynchronizerData is a free data retrieval call binding the contract method 0x52d866dc.
//
// Solidity: function getSynchronizerData(uint256 _start, uint256 _limit) view returns((string,string,string,string,uint256)[])
func (_BluzelleAdapter *BluzelleAdapterSession) GetSynchronizerData(_start *big.Int, _limit *big.Int) ([]BluzelleAdapterTransaction, error) {
	return _BluzelleAdapter.Contract.GetSynchronizerData(&_BluzelleAdapter.CallOpts, _start, _limit)
}

// GetSynchronizerData is a free data retrieval call binding the contract method 0x52d866dc.
//
// Solidity: function getSynchronizerData(uint256 _start, uint256 _limit) view returns((string,string,string,string,uint256)[])
func (_BluzelleAdapter *BluzelleAdapterCallerSession) GetSynchronizerData(_start *big.Int, _limit *big.Int) ([]BluzelleAdapterTransaction, error) {
	return _BluzelleAdapter.Contract.GetSynchronizerData(&_BluzelleAdapter.CallOpts, _start, _limit)
}

// KeyMax is a free data retrieval call binding the contract method 0xfd220167.
//
// Solidity: function keyMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) KeyMax(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "keyMax")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// KeyMax is a free data retrieval call binding the contract method 0xfd220167.
//
// Solidity: function keyMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) KeyMax() (*big.Int, error) {
	return _BluzelleAdapter.Contract.KeyMax(&_BluzelleAdapter.CallOpts)
}

// KeyMax is a free data retrieval call binding the contract method 0xfd220167.
//
// Solidity: function keyMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) KeyMax() (*big.Int, error) {
	return _BluzelleAdapter.Contract.KeyMax(&_BluzelleAdapter.CallOpts)
}

// KeysValues is a free data retrieval call binding the contract method 0x913f5bb2.
//
// Solidity: function keysValues(address _user, string _uuid) view returns((string,bool,uint256)[])
func (_BluzelleAdapter *BluzelleAdapterCaller) KeysValues(opts *bind.CallOpts, _user common.Address, _uuid string) ([]BluzelleAdapterKeyValue, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "keysValues", _user, _uuid)

	if err != nil {
		return *new([]BluzelleAdapterKeyValue), err
	}

	out0 := *abi.ConvertType(out[0], new([]BluzelleAdapterKeyValue)).(*[]BluzelleAdapterKeyValue)

	return out0, err

}

// KeysValues is a free data retrieval call binding the contract method 0x913f5bb2.
//
// Solidity: function keysValues(address _user, string _uuid) view returns((string,bool,uint256)[])
func (_BluzelleAdapter *BluzelleAdapterSession) KeysValues(_user common.Address, _uuid string) ([]BluzelleAdapterKeyValue, error) {
	return _BluzelleAdapter.Contract.KeysValues(&_BluzelleAdapter.CallOpts, _user, _uuid)
}

// KeysValues is a free data retrieval call binding the contract method 0x913f5bb2.
//
// Solidity: function keysValues(address _user, string _uuid) view returns((string,bool,uint256)[])
func (_BluzelleAdapter *BluzelleAdapterCallerSession) KeysValues(_user common.Address, _uuid string) ([]BluzelleAdapterKeyValue, error) {
	return _BluzelleAdapter.Contract.KeysValues(&_BluzelleAdapter.CallOpts, _user, _uuid)
}

// Lease is a free data retrieval call binding the contract method 0xc998eef4.
//
// Solidity: function lease() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) Lease(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "lease")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Lease is a free data retrieval call binding the contract method 0xc998eef4.
//
// Solidity: function lease() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) Lease() (*big.Int, error) {
	return _BluzelleAdapter.Contract.Lease(&_BluzelleAdapter.CallOpts)
}

// Lease is a free data retrieval call binding the contract method 0xc998eef4.
//
// Solidity: function lease() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) Lease() (*big.Int, error) {
	return _BluzelleAdapter.Contract.Lease(&_BluzelleAdapter.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterSession) Owner() (common.Address, error) {
	return _BluzelleAdapter.Contract.Owner(&_BluzelleAdapter.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) Owner() (common.Address, error) {
	return _BluzelleAdapter.Contract.Owner(&_BluzelleAdapter.CallOpts)
}

// Read is a free data retrieval call binding the contract method 0xd967f728.
//
// Solidity: function read(address _user, string _uuid, string _key) view returns((string,bool,uint256))
func (_BluzelleAdapter *BluzelleAdapterCaller) Read(opts *bind.CallOpts, _user common.Address, _uuid string, _key string) (BluzelleAdapterKeyValue, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "read", _user, _uuid, _key)

	if err != nil {
		return *new(BluzelleAdapterKeyValue), err
	}

	out0 := *abi.ConvertType(out[0], new(BluzelleAdapterKeyValue)).(*BluzelleAdapterKeyValue)

	return out0, err

}

// Read is a free data retrieval call binding the contract method 0xd967f728.
//
// Solidity: function read(address _user, string _uuid, string _key) view returns((string,bool,uint256))
func (_BluzelleAdapter *BluzelleAdapterSession) Read(_user common.Address, _uuid string, _key string) (BluzelleAdapterKeyValue, error) {
	return _BluzelleAdapter.Contract.Read(&_BluzelleAdapter.CallOpts, _user, _uuid, _key)
}

// Read is a free data retrieval call binding the contract method 0xd967f728.
//
// Solidity: function read(address _user, string _uuid, string _key) view returns((string,bool,uint256))
func (_BluzelleAdapter *BluzelleAdapterCallerSession) Read(_user common.Address, _uuid string, _key string) (BluzelleAdapterKeyValue, error) {
	return _BluzelleAdapter.Contract.Read(&_BluzelleAdapter.CallOpts, _user, _uuid, _key)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterCaller) Token(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "token")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterSession) Token() (common.Address, error) {
	return _BluzelleAdapter.Contract.Token(&_BluzelleAdapter.CallOpts)
}

// Token is a free data retrieval call binding the contract method 0xfc0c546a.
//
// Solidity: function token() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) Token() (common.Address, error) {
	return _BluzelleAdapter.Contract.Token(&_BluzelleAdapter.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterCaller) TokenContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "tokenContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterSession) TokenContract() (common.Address, error) {
	return _BluzelleAdapter.Contract.TokenContract(&_BluzelleAdapter.CallOpts)
}

// TokenContract is a free data retrieval call binding the contract method 0x55a373d6.
//
// Solidity: function tokenContract() view returns(address)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) TokenContract() (common.Address, error) {
	return _BluzelleAdapter.Contract.TokenContract(&_BluzelleAdapter.CallOpts)
}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) TransactionCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "transactionCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) TransactionCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.TransactionCount(&_BluzelleAdapter.CallOpts)
}

// TransactionCount is a free data retrieval call binding the contract method 0xb77bf600.
//
// Solidity: function transactionCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) TransactionCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.TransactionCount(&_BluzelleAdapter.CallOpts)
}

// UpdateCount is a free data retrieval call binding the contract method 0x69b4ecc9.
//
// Solidity: function updateCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) UpdateCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "updateCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UpdateCount is a free data retrieval call binding the contract method 0x69b4ecc9.
//
// Solidity: function updateCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) UpdateCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.UpdateCount(&_BluzelleAdapter.CallOpts)
}

// UpdateCount is a free data retrieval call binding the contract method 0x69b4ecc9.
//
// Solidity: function updateCount() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) UpdateCount() (*big.Int, error) {
	return _BluzelleAdapter.Contract.UpdateCount(&_BluzelleAdapter.CallOpts)
}

// UuidMax is a free data retrieval call binding the contract method 0xa74b6a40.
//
// Solidity: function uuidMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) UuidMax(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "uuidMax")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UuidMax is a free data retrieval call binding the contract method 0xa74b6a40.
//
// Solidity: function uuidMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) UuidMax() (*big.Int, error) {
	return _BluzelleAdapter.Contract.UuidMax(&_BluzelleAdapter.CallOpts)
}

// UuidMax is a free data retrieval call binding the contract method 0xa74b6a40.
//
// Solidity: function uuidMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) UuidMax() (*big.Int, error) {
	return _BluzelleAdapter.Contract.UuidMax(&_BluzelleAdapter.CallOpts)
}

// ValueMax is a free data retrieval call binding the contract method 0x306d5d4f.
//
// Solidity: function valueMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCaller) ValueMax(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BluzelleAdapter.contract.Call(opts, &out, "valueMax")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ValueMax is a free data retrieval call binding the contract method 0x306d5d4f.
//
// Solidity: function valueMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterSession) ValueMax() (*big.Int, error) {
	return _BluzelleAdapter.Contract.ValueMax(&_BluzelleAdapter.CallOpts)
}

// ValueMax is a free data retrieval call binding the contract method 0x306d5d4f.
//
// Solidity: function valueMax() view returns(uint256)
func (_BluzelleAdapter *BluzelleAdapterCallerSession) ValueMax() (*big.Int, error) {
	return _BluzelleAdapter.Contract.ValueMax(&_BluzelleAdapter.CallOpts)
}

// Create is a paid mutator transaction binding the contract method 0x5d28560a.
//
// Solidity: function create(string _uuid, string _key, string _value) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactor) Create(opts *bind.TransactOpts, _uuid string, _key string, _value string) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "create", _uuid, _key, _value)
}

// Create is a paid mutator transaction binding the contract method 0x5d28560a.
//
// Solidity: function create(string _uuid, string _key, string _value) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterSession) Create(_uuid string, _key string, _value string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Create(&_BluzelleAdapter.TransactOpts, _uuid, _key, _value)
}

// Create is a paid mutator transaction binding the contract method 0x5d28560a.
//
// Solidity: function create(string _uuid, string _key, string _value) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) Create(_uuid string, _key string, _value string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Create(&_BluzelleAdapter.TransactOpts, _uuid, _key, _value)
}

// Remove is a paid mutator transaction binding the contract method 0x44590a7e.
//
// Solidity: function remove(string _uuid, string _key) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactor) Remove(opts *bind.TransactOpts, _uuid string, _key string) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "remove", _uuid, _key)
}

// Remove is a paid mutator transaction binding the contract method 0x44590a7e.
//
// Solidity: function remove(string _uuid, string _key) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterSession) Remove(_uuid string, _key string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Remove(&_BluzelleAdapter.TransactOpts, _uuid, _key)
}

// Remove is a paid mutator transaction binding the contract method 0x44590a7e.
//
// Solidity: function remove(string _uuid, string _key) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) Remove(_uuid string, _key string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Remove(&_BluzelleAdapter.TransactOpts, _uuid, _key)
}

// RemoveAll is a paid mutator transaction binding the contract method 0x0a9af861.
//
// Solidity: function removeAll(string _uuid) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactor) RemoveAll(opts *bind.TransactOpts, _uuid string) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "removeAll", _uuid)
}

// RemoveAll is a paid mutator transaction binding the contract method 0x0a9af861.
//
// Solidity: function removeAll(string _uuid) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterSession) RemoveAll(_uuid string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.RemoveAll(&_BluzelleAdapter.TransactOpts, _uuid)
}

// RemoveAll is a paid mutator transaction binding the contract method 0x0a9af861.
//
// Solidity: function removeAll(string _uuid) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) RemoveAll(_uuid string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.RemoveAll(&_BluzelleAdapter.TransactOpts, _uuid)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BluzelleAdapter *BluzelleAdapterTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BluzelleAdapter *BluzelleAdapterSession) RenounceOwnership() (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.RenounceOwnership(&_BluzelleAdapter.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.RenounceOwnership(&_BluzelleAdapter.TransactOpts)
}

// SetChargeperByte is a paid mutator transaction binding the contract method 0x90001833.
//
// Solidity: function setChargeperByte(uint256 _chargePerByte) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactor) SetChargeperByte(opts *bind.TransactOpts, _chargePerByte *big.Int) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "setChargeperByte", _chargePerByte)
}

// SetChargeperByte is a paid mutator transaction binding the contract method 0x90001833.
//
// Solidity: function setChargeperByte(uint256 _chargePerByte) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterSession) SetChargeperByte(_chargePerByte *big.Int) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.SetChargeperByte(&_BluzelleAdapter.TransactOpts, _chargePerByte)
}

// SetChargeperByte is a paid mutator transaction binding the contract method 0x90001833.
//
// Solidity: function setChargeperByte(uint256 _chargePerByte) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) SetChargeperByte(_chargePerByte *big.Int) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.SetChargeperByte(&_BluzelleAdapter.TransactOpts, _chargePerByte)
}

// SetLease is a paid mutator transaction binding the contract method 0x6136ec4c.
//
// Solidity: function setLease(uint256 _seconds) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactor) SetLease(opts *bind.TransactOpts, _seconds *big.Int) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "setLease", _seconds)
}

// SetLease is a paid mutator transaction binding the contract method 0x6136ec4c.
//
// Solidity: function setLease(uint256 _seconds) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterSession) SetLease(_seconds *big.Int) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.SetLease(&_BluzelleAdapter.TransactOpts, _seconds)
}

// SetLease is a paid mutator transaction binding the contract method 0x6136ec4c.
//
// Solidity: function setLease(uint256 _seconds) returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) SetLease(_seconds *big.Int) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.SetLease(&_BluzelleAdapter.TransactOpts, _seconds)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BluzelleAdapter *BluzelleAdapterTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BluzelleAdapter *BluzelleAdapterSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.TransferOwnership(&_BluzelleAdapter.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.TransferOwnership(&_BluzelleAdapter.TransactOpts, newOwner)
}

// Update is a paid mutator transaction binding the contract method 0x31c3e456.
//
// Solidity: function update(string _uuid, string _key, string _value) returns((string,bool,uint256))
func (_BluzelleAdapter *BluzelleAdapterTransactor) Update(opts *bind.TransactOpts, _uuid string, _key string, _value string) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "update", _uuid, _key, _value)
}

// Update is a paid mutator transaction binding the contract method 0x31c3e456.
//
// Solidity: function update(string _uuid, string _key, string _value) returns((string,bool,uint256))
func (_BluzelleAdapter *BluzelleAdapterSession) Update(_uuid string, _key string, _value string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Update(&_BluzelleAdapter.TransactOpts, _uuid, _key, _value)
}

// Update is a paid mutator transaction binding the contract method 0x31c3e456.
//
// Solidity: function update(string _uuid, string _key, string _value) returns((string,bool,uint256))
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) Update(_uuid string, _key string, _value string) (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Update(&_BluzelleAdapter.TransactOpts, _uuid, _key, _value)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactor) Withdraw(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BluzelleAdapter.contract.Transact(opts, "withdraw")
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns(bool)
func (_BluzelleAdapter *BluzelleAdapterSession) Withdraw() (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Withdraw(&_BluzelleAdapter.TransactOpts)
}

// Withdraw is a paid mutator transaction binding the contract method 0x3ccfd60b.
//
// Solidity: function withdraw() returns(bool)
func (_BluzelleAdapter *BluzelleAdapterTransactorSession) Withdraw() (*types.Transaction, error) {
	return _BluzelleAdapter.Contract.Withdraw(&_BluzelleAdapter.TransactOpts)
}

// BluzelleAdapterLogNewOwnerIterator is returned from FilterLogNewOwner and is used to iterate over the raw logs and unpacked data for LogNewOwner events raised by the BluzelleAdapter contract.
type BluzelleAdapterLogNewOwnerIterator struct {
	Event *BluzelleAdapterLogNewOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BluzelleAdapterLogNewOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BluzelleAdapterLogNewOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BluzelleAdapterLogNewOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BluzelleAdapterLogNewOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BluzelleAdapterLogNewOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BluzelleAdapterLogNewOwner represents a LogNewOwner event raised by the BluzelleAdapter contract.
type BluzelleAdapterLogNewOwner struct {
	Sender   common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNewOwner is a free log retrieval operation binding the contract event 0x1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9.
//
// Solidity: event LogNewOwner(address sender, address newOwner)
func (_BluzelleAdapter *BluzelleAdapterFilterer) FilterLogNewOwner(opts *bind.FilterOpts) (*BluzelleAdapterLogNewOwnerIterator, error) {

	logs, sub, err := _BluzelleAdapter.contract.FilterLogs(opts, "LogNewOwner")
	if err != nil {
		return nil, err
	}
	return &BluzelleAdapterLogNewOwnerIterator{contract: _BluzelleAdapter.contract, event: "LogNewOwner", logs: logs, sub: sub}, nil
}

// WatchLogNewOwner is a free log subscription operation binding the contract event 0x1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9.
//
// Solidity: event LogNewOwner(address sender, address newOwner)
func (_BluzelleAdapter *BluzelleAdapterFilterer) WatchLogNewOwner(opts *bind.WatchOpts, sink chan<- *BluzelleAdapterLogNewOwner) (event.Subscription, error) {

	logs, sub, err := _BluzelleAdapter.contract.WatchLogs(opts, "LogNewOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BluzelleAdapterLogNewOwner)
				if err := _BluzelleAdapter.contract.UnpackLog(event, "LogNewOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNewOwner is a log parse operation binding the contract event 0x1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9.
//
// Solidity: event LogNewOwner(address sender, address newOwner)
func (_BluzelleAdapter *BluzelleAdapterFilterer) ParseLogNewOwner(log types.Log) (*BluzelleAdapterLogNewOwner, error) {
	event := new(BluzelleAdapterLogNewOwner)
	if err := _BluzelleAdapter.contract.UnpackLog(event, "LogNewOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20ABI is the input ABI used to generate the binding from.
const IERC20ABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// IERC20FuncSigs maps the 4-byte function signature to its string representation.
var IERC20FuncSigs = map[string]string{
	"dd62ed3e": "allowance(address,address)",
	"095ea7b3": "approve(address,uint256)",
	"70a08231": "balanceOf(address)",
	"18160ddd": "totalSupply()",
	"a9059cbb": "transfer(address,uint256)",
	"23b872dd": "transferFrom(address,address,uint256)",
}

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, sender, recipient, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnableABI is the input ABI used to generate the binding from.
const OwnableABI = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"LogNewOwner\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// OwnableFuncSigs maps the 4-byte function signature to its string representation.
var OwnableFuncSigs = map[string]string{
	"8da5cb5b": "owner()",
	"715018a6": "renounceOwnership()",
	"f2fde38b": "transferOwnership(address)",
}

// OwnableBin is the compiled bytecode used for deploying new contracts.
var OwnableBin = "0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556101c5806100326000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063715018a6146100465780638da5cb5b14610050578063f2fde38b1461007f575b600080fd5b61004e610092565b005b600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61004e61008d366004610161565b6100f3565b6000546001600160a01b031633146100a957600080fd5b60008054604080516001600160a01b03909216825260208201929092527f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9910160405180910390a1565b6000546001600160a01b0316331461010a57600080fd5b6001600160a01b03811661011d57600080fd5b604080513381526001600160a01b03831660208201527f1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9910160405180910390a150565b600060208284031215610172578081fd5b81356001600160a01b0381168114610188578182fd5b939250505056fea2646970667358221220d04b62c90cce2095605a3b20114ecaad5b0a2b6b33db18d79802a198fc40dd6264736f6c63430008030033"

// DeployOwnable deploys a new Ethereum contract, binding an instance of Ownable to it.
func DeployOwnable(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Ownable, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(OwnableBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(OwnableABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// OwnableLogNewOwnerIterator is returned from FilterLogNewOwner and is used to iterate over the raw logs and unpacked data for LogNewOwner events raised by the Ownable contract.
type OwnableLogNewOwnerIterator struct {
	Event *OwnableLogNewOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnableLogNewOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnableLogNewOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnableLogNewOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnableLogNewOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnableLogNewOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnableLogNewOwner represents a LogNewOwner event raised by the Ownable contract.
type OwnableLogNewOwner struct {
	Sender   common.Address
	NewOwner common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterLogNewOwner is a free log retrieval operation binding the contract event 0x1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9.
//
// Solidity: event LogNewOwner(address sender, address newOwner)
func (_Ownable *OwnableFilterer) FilterLogNewOwner(opts *bind.FilterOpts) (*OwnableLogNewOwnerIterator, error) {

	logs, sub, err := _Ownable.contract.FilterLogs(opts, "LogNewOwner")
	if err != nil {
		return nil, err
	}
	return &OwnableLogNewOwnerIterator{contract: _Ownable.contract, event: "LogNewOwner", logs: logs, sub: sub}, nil
}

// WatchLogNewOwner is a free log subscription operation binding the contract event 0x1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9.
//
// Solidity: event LogNewOwner(address sender, address newOwner)
func (_Ownable *OwnableFilterer) WatchLogNewOwner(opts *bind.WatchOpts, sink chan<- *OwnableLogNewOwner) (event.Subscription, error) {

	logs, sub, err := _Ownable.contract.WatchLogs(opts, "LogNewOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnableLogNewOwner)
				if err := _Ownable.contract.UnpackLog(event, "LogNewOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLogNewOwner is a log parse operation binding the contract event 0x1f8d7d25344642d919d55999e4664aa452a5f424bc0936ceb9c2b300db7dcbd9.
//
// Solidity: event LogNewOwner(address sender, address newOwner)
func (_Ownable *OwnableFilterer) ParseLogNewOwner(log types.Log) (*OwnableLogNewOwner, error) {
	event := new(OwnableLogNewOwner)
	if err := _Ownable.contract.UnpackLog(event, "LogNewOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SafeERC20ABI is the input ABI used to generate the binding from.
const SafeERC20ABI = "[]"

// SafeERC20Bin is the compiled bytecode used for deploying new contracts.
var SafeERC20Bin = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a44cb9044663d897906b703d984122562def7b9694dfe9da5b855b0dc55b01d164736f6c63430008030033"

// DeploySafeERC20 deploys a new Ethereum contract, binding an instance of SafeERC20 to it.
func DeploySafeERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeERC20, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeERC20ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// SafeERC20 is an auto generated Go binding around an Ethereum contract.
type SafeERC20 struct {
	SafeERC20Caller     // Read-only binding to the contract
	SafeERC20Transactor // Write-only binding to the contract
	SafeERC20Filterer   // Log filterer for contract events
}

// SafeERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type SafeERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeERC20Session struct {
	Contract     *SafeERC20        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeERC20CallerSession struct {
	Contract *SafeERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SafeERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeERC20TransactorSession struct {
	Contract     *SafeERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SafeERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type SafeERC20Raw struct {
	Contract *SafeERC20 // Generic contract binding to access the raw methods on
}

// SafeERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeERC20CallerRaw struct {
	Contract *SafeERC20Caller // Generic read-only contract binding to access the raw methods on
}

// SafeERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeERC20TransactorRaw struct {
	Contract *SafeERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeERC20 creates a new instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20(address common.Address, backend bind.ContractBackend) (*SafeERC20, error) {
	contract, err := bindSafeERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// NewSafeERC20Caller creates a new read-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Caller(address common.Address, caller bind.ContractCaller) (*SafeERC20Caller, error) {
	contract, err := bindSafeERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Caller{contract: contract}, nil
}

// NewSafeERC20Transactor creates a new write-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*SafeERC20Transactor, error) {
	contract, err := bindSafeERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Transactor{contract: contract}, nil
}

// NewSafeERC20Filterer creates a new log filterer instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*SafeERC20Filterer, error) {
	contract, err := bindSafeERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Filterer{contract: contract}, nil
}

// bindSafeERC20 binds a generic wrapper to an already deployed contract.
func bindSafeERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeERC20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.SafeERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transact(opts, method, params...)
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
var SafeMathBin = "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204b99747734007219c36dd57a0f653be109c1ac055ba141139f4258b364e6f03464736f6c63430008030033"

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}
